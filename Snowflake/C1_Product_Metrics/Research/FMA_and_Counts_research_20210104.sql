
SELECT REPORT_DATE, CRM, SUM(ACTIVITY_COUNT) as ACTIVITY 
FROM APTTUS_DW.PRODUCT.MONTHLY_AA_ACTIVITY_SCORES
group by REPORT_DATE, CRM
order by REPORT_DATE, CRM
; 

SELECT MONTH, COUNT(*)
FROM APTTUS_DW.SF_PRODUCTION.PRODUCTMETRICSDATA_SUMMARY
group by MONTH
order by MONTH
;


Select COUNT(*), REPORT_DATE
FROM APTTUS_DW.SF_PRODUCTION.CONTRACTS_CLIENT_USER_TYPE_COUNTS
group by REPORT_DATE
order by REPORT_DATE
;

Select COUNT(*), DATE
FROM APTTUS_DW.SF_PRODUCTION.PRODUCT_APPANALYTICS_SUMMARY
group by DATE
order by DATE
;

SELECT COUNT(*), YEAR(TIMESTAMP_DERIVED) as YR, MONTH(TIMESTAMP_DERIVED) as MON
FROM APTTUS_DW.SF_PRODUCTION.PRODUCTMETRICSDATA_DETAIL
group by YEAR(TIMESTAMP_DERIVED), MONTH(TIMESTAMP_DERIVED) 
order by 2, 3
;

SELECT *
FROM APTTUS_DW.PRODUCT.FMA_DAILY_ACTIVITY
WHERE SOURCE_ORG_ID = '00DA0000000Kz0lMAC'
  AND PRODUCT_LINE = 'Conga Orchestrate'
ORDEr by ACTIVITY_DATE desc   
;

SELECT *
FROM APTTUS_DW.SNAPSHOTS.FMA_VALUES_HISTORY	
WHERE SFFMA__LICENSE__C = 'a021T00000vQOy2QAG'
order by ACTIVITY_DATE desc
;

SELECT *
FROM APTTUS_DW.PRODUCT."FMA_Feature_Daily_Values"
WHERE LICENSE_ID  = 'a021T00000vQOy2QAG'
ORDER BY ACTIVITY_DATE desc
;

SELECT COUNT(*), YEAR(REQUEST_TIMESTAMP) as YR, MONTH(REQUEST_TIMESTAMP) as MON
FROM APTTUS_DW.SF_PRODUCTION.SIGN_SIGNINGREQUEST_EVENT
group by YEAR(REQUEST_TIMESTAMP), MONTH(REQUEST_TIMESTAMP)
order by 2 desc, 3 desc 
;

SELECT count(*), TRANSACTION_ID, AUDIT_EVENT_ID, EVENT_TYPE, REQUEST_TIMESTAMP
FROM APTTUS_DW.SF_PRODUCTION.SIGN_SIGNINGREQUEST_EVENT
group by TRANSACTION_ID, AUDIT_EVENT_ID, EVENT_TYPE, REQUEST_TIMESTAMP
having COUNT(*) > 1
;

SELECT * from APTTUS_DW.SF_PRODUCTION.SIGN_SIGNINGREQUEST_EVENT
WHERE TRANSACTION_ID IN ('t24ufyjzuczqgiwxew4ge02r1fqlxu9orv5206pimwt40li2n')
;

  select *
  from table(information_schema.task_history()) 
  --WHERE NAME like '%ProductMetricsSummaryLoading%'
  order by scheduled_time desc;
;  

select * 
from APTTUS_DW.PUBLIC.AUDITLOG
where FILE like '%sign%'  
order by STARTTIME desc, FILE desc 
;  

SELECT COUNT(*), ACTIVITY_MONTH_DATE
FROM APTTUS_DW.PRODUCT.MONTHLY_ACTIVITY
WHERE PRODUCT_LINE = 'Conga Sign'
group by ACTIVITY_MONTH_DATE
;

DELETE -- from APTTUS_DW.PRODUCT.PIPELINED_MONTHLY_ACTIVITY
WHERE PRODUCT_LINE = 'Conga Sign'
  AND ACTIVITY_MONTH_DATE = '2020-11-01' 
  ;

SELECT COUNT(*)
FROM APTTUS_DW.PRODUCT.MONTHLY_ACTIVITY_SCORES 
WHERE REPORT_DATE = '2020-12-01'
;

DELETE --FROM APTTUS_DW.PRODUCT.MONTHLY_ACTIVITY_SCORES 
WHERE REPORT_DATE = '2020-12-01'
;
  
INSERT INTO APTTUS_DW.PRODUCT.PRODUCT_METRICS_RUN_CONTROL (RUN_FOR_MONTH, OPERATOR, EXECUTION_TIME, STATUS, PROC_OR_STEP)
SELECT '2020-12-01' AS RUN_FOR_MONTH -- USE THIS TO MANUALLY OVERRIDE THE RUN DATE OTHERWISE IT WILL DEFAULT
     , CURRENT_USER() AS OPERATOR
     , CONVERT_TIMEZONE('UTC',CURRENT_TIMESTAMP()) AS EXECUTION_TIME
     , 'Incomplete' AS STATUS
     , 'FILL_MONTHLY_ACTIVITY_SCORES' as PROC_OR_STEP
;  

SELECT COUNT(*), REPORT_DATE 
FROM APTTUS_DW.PRODUCT.MONTHLY_AA_ACTIVITY_SCORES
GROUP BY REPORT_DATE   
order by REPORT_DATE desc
; 

DELETE --from APTTUS_DW.PRODUCT.MONTHLY_AA_ACTIVITY_SCORES
WHERE REPORT_DATE >= '2020-11-01'
;

--INSERT INTO APTTUS_DW.PRODUCT.PRODUCT_METRICS_RUN_CONTROL (RUN_FOR_MONTH, OPERATOR, EXECUTION_TIME, STATUS, PROC_OR_STEP)
SELECT '2020-12-01' AS RUN_FOR_MONTH -- USE THIS TO MANUALLY OVERRIDE THE RUN DATE OTHERWISE IT WILL DEFAULT
     , CURRENT_USER() AS OPERATOR
     , CONVERT_TIMEZONE('UTC',CURRENT_TIMESTAMP()) AS EXECUTION_TIME
     , 'Incomplete' AS STATUS
     , 'FILL_MONTHLY_AA_ACTIVITY_SCORES' as PROC_OR_STEP